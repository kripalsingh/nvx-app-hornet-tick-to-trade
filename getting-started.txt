To get started:

Prerequisites:
============

- A Git client installed (https://git-scm.com/book/en/v1/Getting-Started)
- Maven (https://maven.apache.org/guides/getting-started/)

Building:
=========

The easiest way to get started it to clone the project and build it.

1. Clone the project:
   git clone nvx-app-hornet-tick-to-trade
2. Build (from cloned root folder)
   mvn clean install

The build will have run a unit test which runs all of the applications in
the same jvm. You can run the unit test from your IDE as well just like 
any other JUnit test. It is located at:
/nvx-app-hornet-tick2trade/src/test/java/com/neeve/tick2trade/TestMessageFlow.java
   
This is a good way to play around with the application - right from the comfort
of your IDE. The unit test, runs using the desktop profile found in the conf/profiles
folder. If you are looking to evaluate performance or something a bit more 'real world', 
You can use the direct or activemq profiles to run the test with each application running
in its own process. For this it is best if you have 3 reasonably powerful, multie socket, 
multicore server boxes. In the target directory after building you will find a bundled 
distribution called nvx-app-hornet-tick2trade-3.1-SNAPSHOT-bundle-run.tar.gz. Copy this to your
3 servers and extract it:

tar -xvf nvx-app-hornet-tick2trade-3.1-SNAPSHOT-bundle-run.tar.gz`

Running With Direct (point to point connections):
=================================================

The direct profile uses direct tcp connections as the messaging transport between 
the application. See the readme.txt in conf/profiles/direct/readme.txt for instructions
on how to configure for your environment. Once configured launch each fo the applications
as follows:

1. Launch the market simulator from server 1:
   numactl -m0 ./market.sh direct
2. Launch the primary ems instance from server 2:
   numactl -m0 ./ems1.sh direct
3. Launch the secondary ems instance from server 3:
   numactl -m0 ./ems2.sh direct
   
Wait until you see that the ems2 server has become a backup by looking for the message:

[AepEngine<ems>] Engine started [Clustered, Backup] (ICR Role=null)

4. Now start the client simulator on **server 1** to start driving traffic:
   numactl -m1 ./market.sh direct

It is important that client and market process are on the same server to capture 
accurate end to end latencies. 

You will see stats being reported in the market and ems1 server's window. 

Time from 'market tick' to message being written to wire:
   In Proc Tick To Trade(interval): [sample=4358, min=67 max=336 mean=72 median=71 75%ile=73 90%ile=75 99%ile=85 99.9%ile=315 99.99%ile=336]
Time from order receipt to order being dispatch to market (the in process time):
   In Proc Time To First Slice(interval): [sample=5017, min=82 max=239 mean=85 median=85 75%ile=87 90%ile=90 99%ile=96 99.9%ile=99 99.99%ile=105]
   
In the market server's window you will see:

The Time To first slice... The time from which the client sent the order to the time it makes it to the market:
   Time To First Slice(interval): [sample=5004, min=184 max=470 mean=205 median=204 75%ile=206 90%ile=209 99%ile=217 99.9%ile=397 99.99%ile=443]

The client will send a configurable number of warmup messages and then send a control message
cause each server to trigger a garbage collection after warmup you should see median latencies
stabilize. On a well tuned set of servers, you should be able to see the whole batch of 2 million
messages sent without any latency spikes. This is possible beacuse the applications run with
virtually zero garbage. 

Running With ActiveMQ (point to point connections):
===================================================
In a production environment, you will most likely be running with an actual message
bus. For high performance applications ActiveMQ would not be a good choice because
the semantics of JMS require synchronous sends which kills performance and throughput,
but for demonstration purposes, it is an easy way to work with a reliable messaging broker. 

To run with ActiveMQ you will need to have an ActiveMQ broker running somewhere that 
is accessible to your server machines. See the readme.txt at conf/profiles/activemq/readme.txt 
for instructions on on how to configure your environment. 

The instructions for running with activemq are the same as for direct, except that `direct' 
should be replaced with activemq on the command line. Additionally, you will likely want
to delete any durable subscriptions left over from previous test runs before running each
tests. This can be done by connecting to your broker with http://<activemqhost>:8161/admin/subscribers.jsp
and deleting durable subscriptions. 

1. Launch the market simulator from server 1:
   numactl -m0 ./market.sh activemq
2. Launch the primary ems instance from server 2:
   numactl -m0 ./ems1.sh activemq
3. Launch the secondary ems instance from server 3:
   numactl -m0 ./ems2.sh activemq
   
Wait until you see that the ems2 server has become a backup by looking for the message:

[AepEngine<ems>] Engine started [Clustered, Backup] (ICR Role=null)

4. Now start the client simulator to start driving traffic:
   numactl -m1 ./market.sh activemq

You will see stats being reported in the market and ems1 server's window. The ActiveMQ
JMS client is not zero garbage so the performance profile running with it will not be 
as smooth as running with direct connections, additionally the ActiveMQ profile is tuned
to send at a lower rate because of the synchronous nature of JMS. You can change client.conf
, market.conf, ems1.conf and ems2.conf to set simulator.qos=BestEffort which effectively
changes the delivery mode to NON_PERSISTENT and eliminates the use of durable subscribers,
this will allow you push more messages through the system at better latencies, but at the 
cost of reliability. 

If you like you can kill the primary server, ems1, and observe that message continues
uninterrupted. Latencies will actually go down in this case because without a backup 
the primary ems server will not be replicating transactions to its peer ... which, of
course, comes at the cost of high availability.  

